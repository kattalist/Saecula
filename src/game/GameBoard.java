/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.Timer;

/**
 *
 * @author 073787251
 */
public class GameBoard extends javax.swing.JPanel {

    /**
     * Creates new form GameBoard
     */
    public GameBoard() {
        initComponents();
        setBackground(Color.black);
        addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (Planet.clickedPlanet == null) {
                    for (StarSystem s : MainFrame.universe) {
                        for (Planet p : s.system) {
                            double cx = p.x + (p.size / 2);
                            double cy = p.y + (p.size / 2);
                            double xDiff = Math.abs(cx - p.parent.x);
                            double yDiff = Math.abs(cy - p.parent.y);
                            double dist = Math.sqrt(xDiff * xDiff + yDiff * yDiff);
                            if (p.mousedOver(MouseInfo.getPointerInfo().getLocation(), new Point((int) (p.parent.x - Math.cos(Math.toRadians(p.orbitAngle - 90)) * dist), (int) (p.parent.y - Math.sin(Math.toRadians(p.orbitAngle - 90)) * dist)))) {
                                p.clicked = true;
                                Planet.clickedPlanet = p;
                            }
                        }
                    }
                } else {
                    if (Tile.clickedTile == null) {
                        for (Tile t : Planet.clickedPlanet.planetBoard) {
                            if (((MouseInfo.getPointerInfo().getLocation().x - 13) - ((MouseInfo.getPointerInfo().getLocation().x - 13) % 50) == t.x) && ((MouseInfo.getPointerInfo().getLocation().y - 35) - ((MouseInfo.getPointerInfo().getLocation().y - 35) % 50) == t.y)) {
                                Tile.clickedTile = t;
                            }
                        }
                    } else {
                        if (MouseInfo.getPointerInfo().getLocation().x - 13 >= 100 && MouseInfo.getPointerInfo().getLocation().x - 13 <= 600) {
                            if (MouseInfo.getPointerInfo().getLocation().y - 35 <= 300 && MouseInfo.getPointerInfo().getLocation().y - 35 >= 200) {
                                if (Tile.clickedTile.usage == 1) {
                                    if (Tile.clickedTile.colonyLevel < 5) {
                                        Tile.clickedTile.colonyLevel++;
                                    }
                                } else {
                                    Tile.clickedTile.usage = 1;
                                    Tile.clickedTile.colonyLevel = 1;
                                }
                                Tile.clickedTile = null;
                            } else if (MouseInfo.getPointerInfo().getLocation().y - 35 <= 500 && MouseInfo.getPointerInfo().getLocation().y - 35 >= 400) {
                                Tile.clickedTile.usage = 2;
                                Tile.clickedTile = null;
                            } else if (MouseInfo.getPointerInfo().getLocation().y - 35 <= 700 && MouseInfo.getPointerInfo().getLocation().y - 35 >= 600) {
                                Tile.clickedTile.usage = 3;
                                Tile.clickedTile = null;
                            }
                        }
                    }
                }
            }
        });
    }

    public void anim() {
        Timer t1 = new Timer(17, new TimerListener());
        t1.start();
    }

    public void drawBoard(Graphics g) {
        if (Tile.clickedTile != null) {
            Tile.clickedTile.displayClickedScreen(g);
        } else {
            for (StarSystem s : MainFrame.universe) {
                s.display(g);
            }
        }
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        drawBoard(g);
    }

    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent ae) {
            repaint();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
